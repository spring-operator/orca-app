buildscript {
	ext {
		springBootVersion = '1.2.8.RELEASE'
		orcaVersion = '1.246.0'
		orcaAppVersion = '1.0.0.BUILD-SNAPSHOT'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'spring-boot'
apply plugin: 'maven-publish'

jar {
	baseName = 'orca-app'
	version = orcaAppVersion
}

/**
 * No need to create your own Main. Simply use the one provided upstream.
 */
springBoot {
	mainClass = 'com.netflix.spinnaker.orca.Main'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenLocal()
	mavenCentral()
	jcenter()
	maven { url "http://spinnaker.bintray.com/gradle" }
}


dependencies {
	compile "com.netflix.spinnaker.orca:orca-web:${orcaVersion}"
	compile('org.codehaus.groovy:groovy')
	testCompile('org.springframework.boot:spring-boot-starter-test')
}

/**
 * Let's pin everything to the version of Spring Boot selected at the top
 */
configurations.all {
	resolutionStrategy.eachDependency { DependencyResolveDetails details ->
		if (details.requested.group == 'org.springframework.boot') {
			details.useVersion springBootVersion
		}
	}

	exclude group: 'org.slf4j', module: 'log4j-over-slf4j'
	exclude group: 'org.slf4j', module: 'slf4j-log4j12'
}

eclipse {
	classpath {
		 containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
		 containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
	}
}

// make sure bootRepackage is included in task graph
project.tasks.findAll { it.name.startsWith("publish") } .each { it.dependsOn assemble }

/**
 * To publish echo-app to an artifactory repository, do this:
 *
 * USERNAME=<username> PASSWORD=<password> ./gradlew publish
 */
publishing {
	repositories {
		if ("${orcaAppVersion}".endsWith(".BUILD-SNAPSHOT")) {
			println "Adding libs-snapshot-local repo as target for publishing maven artifacts..."
			maven {
				url "https://repo.spring.io/libs-snapshot-local"
				credentials {
					username System.getenv()['USERNAME']
					password System.getenv()['PASSWORD']
				}
			}
		} else if ("${orcaAppVersion}".endsWith(".RELEASE")) {
			println "Adding libs-release-local repo as target for publishing maven artifacts..."
			maven {
				url "https://repo.spring.io/libs-release-local"
				credentials {
					username System.getenv()['USERNAME']
					password System.getenv()['PASSWORD']
				}
			}
		} else {
			println "Adding libs-milestone-local repo as target for publishing maven artifacts..."
			maven {
				url "https://repo.spring.io/libs-milestone-local"
				credentials {
					username System.getenv()['USERNAME']
					password System.getenv()['PASSWORD']
				}
			}
		}
	}

	publications {
		maven(MavenPublication) {
			groupId 'org.springframework.cloud'
			artifactId 'orca-app'
			version "${orcaAppVersion}"

			artifact ("$buildDir/libs/${project.name}-${orcaAppVersion}.jar")
		}
	}
}
